From 0cf31a80a58693944f4046df146119141b39dcfb Mon Sep 17 00:00:00 2001
From: Ishimoto Shinobu <nagakamira@gmail.com>
Date: Mon, 22 Jun 2020 06:38:09 +0900
Subject: [PATCH] fix qtwebengine

Signed-off-by: Ishimoto Shinobu <nagakamira@gmail.com>
---
 ...llocator_shim_default_dispatch_to_glibc.cc | 90 +++++++++++++++++++
 .../chromium/base/debug/stack_trace.cc        |  4 +-
 .../chromium/base/debug/stack_trace_posix.cc  | 16 ++--
 .../src/3rdparty/chromium/base/logging.cc     |  2 +-
 .../base/process/process_metrics_posix.cc     |  4 +-
 .../base/process/process_metrics_posix.cc.rej | 17 ++++
 .../base/trace_event/malloc_dump_provider.cc  |  4 +-
 .../net/dns/dns_config_service_posix.cc       |  4 +
 .../3rdparty/chromium/net/dns/dns_reloader.cc |  4 +
 .../3rdparty/chromium/net/dns/resolv_compat.h | 29 ++++++
 .../chromium/net/socket/udp_socket_posix.cc   |  2 +-
 .../ppapi/utility/threading/simple_thread.cc  |  2 +-
 .../syscall_parameters_restrictions.cc        | 22 ++---
 .../linux/seccomp-bpf-helpers/syscall_sets.cc |  5 +-
 .../sandbox/linux/seccomp-bpf/trap.cc         |  5 ++
 .../system_headers/arm64_linux_syscalls.h     |  4 +
 .../linux/system_headers/arm_linux_syscalls.h |  5 ++
 .../system_headers/mips64_linux_syscalls.h    |  4 +
 .../system_headers/mips_linux_syscalls.h      |  4 +
 .../system_headers/x86_32_linux_syscalls.h    |  5 ++
 .../system_headers/x86_64_linux_syscalls.h    |  5 ++
 .../linux/bpf_renderer_policy_linux.cc        |  6 ++
 .../blink/renderer/platform/wtf/stack_util.cc |  4 +-
 .../dump_writer_common/ucontext_reader.cc     |  4 +-
 .../dump_writer_common/ucontext_reader.h      |  2 +-
 .../linux/minidump_writer/minidump_writer.h   |  2 +-
 .../breakpad/src/common/linux/elf_core_dump.h |  3 +
 .../third_party/lss/linux_syscall_support.h   |  9 ++
 .../third_party/nasm/config/config-linux.h    |  2 +-
 .../ots/include/opentype-sanitiser.h          |  1 +
 .../yasm/source/config/linux/config.h         |  2 +-
 .../v8/src/base/platform/platform-posix.cc    |  2 +-
 qtwebengine/src/core/api/qtbug-61521.cpp      |  4 +
 33 files changed, 235 insertions(+), 43 deletions(-)
 create mode 100644 qtwebengine/src/3rdparty/chromium/base/process/process_metrics_posix.cc.rej
 create mode 100644 qtwebengine/src/3rdparty/chromium/net/dns/resolv_compat.h

diff --git a/qtwebengine/src/3rdparty/chromium/base/allocator/allocator_shim_default_dispatch_to_glibc.cc b/qtwebengine/src/3rdparty/chromium/base/allocator/allocator_shim_default_dispatch_to_glibc.cc
index 6c4ee219c2..ace9bffaf7 100644
--- a/qtwebengine/src/3rdparty/chromium/base/allocator/allocator_shim_default_dispatch_to_glibc.cc
+++ b/qtwebengine/src/3rdparty/chromium/base/allocator/allocator_shim_default_dispatch_to_glibc.cc
@@ -8,6 +8,7 @@
 #include <dlfcn.h>
 #include <malloc.h>
 
+#if defined(__GLIBC__)
 // This translation unit defines a default dispatch for the allocator shim which
 // routes allocations to libc functions.
 // The code here is strongly inspired from tcmalloc's libc_override_glibc.h.
@@ -86,3 +87,92 @@ const AllocatorDispatch AllocatorDispatch::default_dispatch = {
     nullptr,               /* aligned_free_function */
     nullptr,               /* next */
 };
+
+#else // defined(__GLIBC__)
+
+#include <dlfcn.h>
+
+extern "C" {
+// Declare function pointers to the memory functions
+typedef void* (*t_libc_malloc)(size_t size);
+typedef void* (*t_libc_calloc)(size_t n, size_t size);
+typedef void* (*t_libc_realloc)(void* address, size_t size);
+typedef void* (*t_libc_memalign)(size_t alignment, size_t size);
+typedef void (*t_libc_free)(void* ptr);
+typedef size_t (*t_libc_malloc_usable_size)(void* ptr);
+
+// Static instances of pointers to libc.so dl symbols
+static t_libc_malloc libc_malloc = NULL;
+static t_libc_calloc libc_calloc = NULL;
+static t_libc_realloc libc_realloc = NULL;
+static t_libc_memalign libc_memalign = NULL;
+static t_libc_free libc_free = NULL;
+static t_libc_malloc_usable_size libc_malloc_usable_size = NULL;
+
+// resolve the symbols in libc.so
+void musl_libc_memory_init(void)
+{
+  libc_malloc = (t_libc_malloc) dlsym(RTLD_NEXT, "malloc");
+  libc_calloc = (t_libc_calloc) dlsym(RTLD_NEXT, "calloc");
+  libc_realloc = (t_libc_realloc) dlsym(RTLD_NEXT, "realloc");
+  libc_memalign = (t_libc_memalign) dlsym(RTLD_NEXT, "memalign");
+  libc_free = (t_libc_free) dlsym(RTLD_NEXT, "free");
+  libc_malloc_usable_size = (t_libc_malloc_usable_size) dlsym(RTLD_NEXT, "malloc_usable_size");
+}
+}  // extern "C"
+
+namespace {
+
+using base::allocator::AllocatorDispatch;
+
+void* MuslMalloc(const AllocatorDispatch*, size_t size, void* context) {
+  if (!libc_malloc)
+    musl_libc_memory_init();
+  return (*libc_malloc)(size);
+}
+
+void* MuslCalloc(const AllocatorDispatch*, size_t n, size_t size, void* context) {
+  if (!libc_calloc)
+    musl_libc_memory_init();
+  return (*libc_calloc)(n, size);
+}
+
+void* MuslRealloc(const AllocatorDispatch*, void* address, size_t size, void* context) {
+  if (!libc_realloc)
+    musl_libc_memory_init();
+  return (*libc_realloc)(address, size);
+}
+
+void* MuslMemalign(const AllocatorDispatch*, size_t alignment, size_t size, void* context) {
+  if (!libc_memalign)
+    musl_libc_memory_init();
+  return (*libc_memalign)(alignment, size);
+}
+
+void MuslFree(const AllocatorDispatch*, void* address, void* context) {
+  if (!libc_free)
+    musl_libc_memory_init();
+  (*libc_free)(address);
+}
+
+size_t MuslGetSizeEstimate(const AllocatorDispatch*, void* address, void* context) {
+  // TODO(siggi, primiano): malloc_usable_size may need redirection in the
+  //     presence of interposing shims that divert allocations.
+  if (!libc_malloc_usable_size)
+    musl_libc_memory_init();
+  return (*libc_malloc_usable_size)(address);
+}
+
+}  // namespace
+
+const AllocatorDispatch AllocatorDispatch::default_dispatch = {
+    &MuslMalloc,           /* alloc_function */
+    &MuslCalloc,           /* alloc_zero_initialized_function */
+    &MuslMemalign,         /* alloc_aligned_function */
+    &MuslRealloc,          /* realloc_function */
+    &MuslFree,             /* free_function */
+    &MuslGetSizeEstimate,  /* get_size_estimate_function */
+    nullptr,               /* next */
+};
+
+#endif
diff --git a/qtwebengine/src/3rdparty/chromium/base/debug/stack_trace.cc b/qtwebengine/src/3rdparty/chromium/base/debug/stack_trace.cc
index d8ca822d96..f6f3d9c695 100644
--- a/qtwebengine/src/3rdparty/chromium/base/debug/stack_trace.cc
+++ b/qtwebengine/src/3rdparty/chromium/base/debug/stack_trace.cc
@@ -233,14 +233,14 @@ std::string StackTrace::ToString() const {
 }
 std::string StackTrace::ToStringWithPrefix(const char* prefix_string) const {
   std::stringstream stream;
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(__GLIBC__) && !defined(_AIX)
   OutputToStreamWithPrefix(&stream, prefix_string);
 #endif
   return stream.str();
 }
 
 std::ostream& operator<<(std::ostream& os, const StackTrace& s) {
-#if !defined(__UCLIBC__) & !defined(_AIX)
+#if defined(__GLIBC__) & !defined(_AIX)
   s.OutputToStream(&os);
 #else
   os << "StackTrace::OutputToStream not implemented.";
diff --git a/qtwebengine/src/3rdparty/chromium/base/debug/stack_trace_posix.cc b/qtwebengine/src/3rdparty/chromium/base/debug/stack_trace_posix.cc
index f4ddf9c1e0..aef9936139 100644
--- a/qtwebengine/src/3rdparty/chromium/base/debug/stack_trace_posix.cc
+++ b/qtwebengine/src/3rdparty/chromium/base/debug/stack_trace_posix.cc
@@ -27,7 +27,7 @@
 #if !defined(USE_SYMBOLIZE)
 #include <cxxabi.h>
 #endif
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(__GLIBC__) && !defined(_AIX)
 #include <execinfo.h>
 #endif
 
@@ -88,7 +88,7 @@ void DemangleSymbols(std::string* text) {
   // Note: code in this function is NOT async-signal safe (std::string uses
   // malloc internally).
 
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(__GLIBC__) && !defined(_AIX)
   std::string::size_type search_from = 0;
   while (search_from < text->size()) {
     // Look for the start of a mangled symbol, from search_from.
@@ -123,7 +123,7 @@ void DemangleSymbols(std::string* text) {
       search_from = mangled_start + 2;
     }
   }
-#endif  // !defined(__UCLIBC__) && !defined(_AIX)
+#endif  // defined(__GLIBC__) && !defined(_AIX)
 }
 #endif  // !defined(USE_SYMBOLIZE)
 
@@ -135,7 +135,7 @@ class BacktraceOutputHandler {
   virtual ~BacktraceOutputHandler() = default;
 };
 
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(__GLIBC__) && !defined(_AIX)
 void OutputPointer(void* pointer, BacktraceOutputHandler* handler) {
   // This should be more than enough to store a 64-bit number in hex:
   // 16 hex digits + 1 for null-terminator.
@@ -218,7 +218,7 @@ void ProcessBacktrace(void* const* trace,
   }
 #endif  // defined(USE_SYMBOLIZE)
 }
-#endif  // !defined(__UCLIBC__) && !defined(_AIX)
+#endif  // defined(__GLIBC__) && !defined(_AIX)
 
 void PrintToStderr(const char* output) {
   // NOTE: This code MUST be async-signal safe (it's used by in-process
@@ -834,7 +834,7 @@ size_t CollectStackTrace(void** trace, size_t count) {
   // NOTE: This code MUST be async-signal safe (it's used by in-process
   // stack dumping signal handler). NO malloc or stdio is allowed here.
 
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(__GLIBC__) && !defined(_AIX)
   // Though the backtrace API man page does not list any possible negative
   // return values, we take no chance.
   return base::saturated_cast<size_t>(backtrace(trace, count));
@@ -847,13 +847,13 @@ void StackTrace::PrintWithPrefix(const char* prefix_string) const {
 // NOTE: This code MUST be async-signal safe (it's used by in-process
 // stack dumping signal handler). NO malloc or stdio is allowed here.
 
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(__GLIBC__) && !defined(_AIX)
   PrintBacktraceOutputHandler handler;
   ProcessBacktrace(trace_, count_, prefix_string, &handler);
 #endif
 }
 
-#if !defined(__UCLIBC__) && !defined(_AIX)
+#if defined(__GLIBC__) && !defined(_AIX)
 void StackTrace::OutputToStreamWithPrefix(std::ostream* os,
                                           const char* prefix_string) const {
   StreamBacktraceOutputHandler handler(os);
diff --git a/qtwebengine/src/3rdparty/chromium/base/logging.cc b/qtwebengine/src/3rdparty/chromium/base/logging.cc
index 608cc1122b..98418fba40 100644
--- a/qtwebengine/src/3rdparty/chromium/base/logging.cc
+++ b/qtwebengine/src/3rdparty/chromium/base/logging.cc
@@ -621,7 +621,7 @@ LogMessage::LogMessage(const char* file, int line, LogSeverity severity,
 
 LogMessage::~LogMessage() {
   size_t stack_start = stream_.tellp();
-#if !defined(OFFICIAL_BUILD) && !defined(OS_NACL) && !defined(__UCLIBC__) && \
+#if !defined(OFFICIAL_BUILD) && !defined(OS_NACL) && defined(__GLIBC__) && \
     !defined(OS_AIX)
   if (severity_ == LOG_FATAL && !base::debug::BeingDebugged()) {
     // Include a stack trace on a fatal, unless a debugger is attached.
diff --git a/qtwebengine/src/3rdparty/chromium/base/process/process_metrics_posix.cc b/qtwebengine/src/3rdparty/chromium/base/process/process_metrics_posix.cc
index 044bd8d244..b98d3250f6 100644
--- a/qtwebengine/src/3rdparty/chromium/base/process/process_metrics_posix.cc
+++ b/qtwebengine/src/3rdparty/chromium/base/process/process_metrics_posix.cc
@@ -110,14 +110,14 @@ size_t ProcessMetrics::GetMallocUsage() {
   malloc_statistics_t stats = {0};
   malloc_zone_statistics(nullptr, &stats);
   return stats.size_in_use;
-#elif defined(OS_LINUX) || defined(OS_ANDROID)
+#elif defined(OS_LINUX) && defined(__GLIBC__)) || defined(OS_ANDROID)
   struct mallinfo minfo = mallinfo();
 #if BUILDFLAG(USE_TCMALLOC)
   return minfo.uordblks;
 #else
   return minfo.hblkhd + minfo.arena;
 #endif
-#elif defined(OS_FUCHSIA)
+#else //if defined(OS_FUCHSIA) // also musl doesn't do this.
   // TODO(fuchsia): Not currently exposed. https://crbug.com/735087.
   return 0;
 #endif
diff --git a/qtwebengine/src/3rdparty/chromium/base/process/process_metrics_posix.cc.rej b/qtwebengine/src/3rdparty/chromium/base/process/process_metrics_posix.cc.rej
new file mode 100644
index 0000000000..d856523020
--- /dev/null
+++ b/qtwebengine/src/3rdparty/chromium/base/process/process_metrics_posix.cc.rej
@@ -0,0 +1,17 @@
+@@ -109,14 +109,14 @@
+   malloc_statistics_t stats = {0};
+   malloc_zone_statistics(nullptr, &stats);
+   return stats.size_in_use;
+-#elif defined(OS_LINUX) || defined(OS_ANDROID)
++#elif (defined(OS_LINUX) && defined(__GLIBC__)) || defined(OS_ANDROID)
+   struct mallinfo minfo = mallinfo();
+ #if defined(USE_TCMALLOC)
+   return minfo.uordblks;
+ #else
+   return minfo.hblkhd + minfo.arena;
+ #endif
+-#elif defined(OS_FUCHSIA)
++#else //if defined(OS_FUCHSIA) // also musl doesn't do this.
+   // TODO(fuchsia): Not currently exposed. https://crbug.com/735087.
+   return 0;
+ #endif
diff --git a/qtwebengine/src/3rdparty/chromium/base/trace_event/malloc_dump_provider.cc b/qtwebengine/src/3rdparty/chromium/base/trace_event/malloc_dump_provider.cc
index 7e42cfc20b..7d8b158893 100644
--- a/qtwebengine/src/3rdparty/chromium/base/trace_event/malloc_dump_provider.cc
+++ b/qtwebengine/src/3rdparty/chromium/base/trace_event/malloc_dump_provider.cc
@@ -132,7 +132,7 @@ bool MallocDumpProvider::OnMemoryDump(const MemoryDumpArgs& args,
   }
 #elif defined(OS_FUCHSIA)
 // TODO(fuchsia): Port, see https://crbug.com/706592.
-#else
+#elif defined(__GLIBC__)
   struct mallinfo info = mallinfo();
 #if !defined(ADDRESS_SANITIZER) && !defined(THREAD_SANITIZER)
   // Sanitizers override mallinfo.
@@ -147,6 +147,8 @@ bool MallocDumpProvider::OnMemoryDump(const MemoryDumpArgs& args,
 
   // Total allocated space is given by |uordblks|.
   allocated_objects_size = info.uordblks;
+#else
+// musl libc does not support mallinfo()
 #endif
 
   MemoryAllocatorDump* outer_dump = pmd->CreateAllocatorDump("malloc");
diff --git a/qtwebengine/src/3rdparty/chromium/net/dns/dns_config_service_posix.cc b/qtwebengine/src/3rdparty/chromium/net/dns/dns_config_service_posix.cc
index 2e0f06b0c1..3899f2fea0 100644
--- a/qtwebengine/src/3rdparty/chromium/net/dns/dns_config_service_posix.cc
+++ b/qtwebengine/src/3rdparty/chromium/net/dns/dns_config_service_posix.cc
@@ -8,6 +8,10 @@
 #include <string>
 #include <type_traits>
 
+#if !defined(__GLIBC__)
+#include "resolv_compat.h"
+#endif
+
 #include "base/bind.h"
 #include "base/files/file.h"
 #include "base/files/file_path.h"
diff --git a/qtwebengine/src/3rdparty/chromium/net/dns/dns_reloader.cc b/qtwebengine/src/3rdparty/chromium/net/dns/dns_reloader.cc
index 1c014a6501..d4d0b92aff 100644
--- a/qtwebengine/src/3rdparty/chromium/net/dns/dns_reloader.cc
+++ b/qtwebengine/src/3rdparty/chromium/net/dns/dns_reloader.cc
@@ -9,6 +9,10 @@
 
 #include <resolv.h>
 
+#if !defined(__GLIBC__)
+#include "resolv_compat.h"
+#endif
+
 #include "base/lazy_instance.h"
 #include "base/logging.h"
 #include "base/macros.h"
diff --git a/qtwebengine/src/3rdparty/chromium/net/dns/resolv_compat.h b/qtwebengine/src/3rdparty/chromium/net/dns/resolv_compat.h
new file mode 100644
index 0000000000..4f0e852a19
--- /dev/null
+++ b/qtwebengine/src/3rdparty/chromium/net/dns/resolv_compat.h
@@ -0,0 +1,29 @@
+#if !defined(__GLIBC__)
+/***************************************************************************
+ * resolv_compat.h
+ *
+ * Mimick GLIBC's res_ninit() and res_nclose() for musl libc
+ * Note: res_init() is actually deprecated according to
+ * http://docs.oracle.com/cd/E36784_01/html/E36875/res-nclose-3resolv.html
+ **************************************************************************/
+#include <string.h>
+
+static inline int res_ninit(res_state statp)
+{
+	int rc = res_init();
+	if (statp != &_res) {
+		memcpy(statp, &_res, sizeof(*statp));
+	}
+	return rc;
+}
+
+static inline int res_nclose(res_state statp)
+{
+	if (!statp)
+		return -1;
+	if (statp != &_res) {
+		memset(statp, 0, sizeof(*statp));
+	}
+	return 0;
+}
+#endif
diff --git a/qtwebengine/src/3rdparty/chromium/net/socket/udp_socket_posix.cc b/qtwebengine/src/3rdparty/chromium/net/socket/udp_socket_posix.cc
index 572472a699..771c29e170 100644
--- a/qtwebengine/src/3rdparty/chromium/net/socket/udp_socket_posix.cc
+++ b/qtwebengine/src/3rdparty/chromium/net/socket/udp_socket_posix.cc
@@ -1191,7 +1191,7 @@ SendResult UDPSocketPosixSender::InternalSendmmsgBuffers(
     msg_iov->push_back({const_cast<char*>(buffer->data()), buffer->length()});
   msgvec->reserve(buffers.size());
   for (size_t j = 0; j < buffers.size(); j++)
-    msgvec->push_back({{nullptr, 0, &msg_iov[j], 1, nullptr, 0, 0}, 0});
+    msgvec->push_back({{nullptr, 0, &msg_iov[j], 1, 0, 0, 0}, 0});
   int result = HANDLE_EINTR(Sendmmsg(fd, &msgvec[0], buffers.size(), 0));
   SendResult send_result(0, 0, std::move(buffers));
   if (result < 0) {
diff --git a/qtwebengine/src/3rdparty/chromium/ppapi/utility/threading/simple_thread.cc b/qtwebengine/src/3rdparty/chromium/ppapi/utility/threading/simple_thread.cc
index 02bf49bdd6..05ee182700 100644
--- a/qtwebengine/src/3rdparty/chromium/ppapi/utility/threading/simple_thread.cc
+++ b/qtwebengine/src/3rdparty/chromium/ppapi/utility/threading/simple_thread.cc
@@ -13,7 +13,7 @@ namespace pp {
 namespace {
 
 // Use 2MB default stack size for Native Client, otherwise use system default.
-#if defined(__native_client__)
+#if defined(__native_client__) || !defined(__GLIBC__)
 const size_t kDefaultStackSize = 2 * 1024 * 1024;
 #else
 const size_t kDefaultStackSize = 0;
diff --git a/qtwebengine/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_parameters_restrictions.cc b/qtwebengine/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_parameters_restrictions.cc
index d9789a7133..ecad793d3b 100644
--- a/qtwebengine/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_parameters_restrictions.cc
+++ b/qtwebengine/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_parameters_restrictions.cc
@@ -139,21 +139,11 @@ namespace sandbox {
 // present (as in newer versions of posix_spawn).
 ResultExpr RestrictCloneToThreadsAndEPERMFork() {
   const Arg<unsigned long> flags(0);
-
-  // TODO(mdempsky): Extend DSL to support (flags & ~mask1) == mask2.
-  const uint64_t kAndroidCloneMask = CLONE_VM | CLONE_FS | CLONE_FILES |
-                                     CLONE_SIGHAND | CLONE_THREAD |
-                                     CLONE_SYSVSEM;
-  const uint64_t kObsoleteAndroidCloneMask = kAndroidCloneMask | CLONE_DETACHED;
-
-  const uint64_t kGlibcPthreadFlags =
-      CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND | CLONE_THREAD |
-      CLONE_SYSVSEM | CLONE_SETTLS | CLONE_PARENT_SETTID | CLONE_CHILD_CLEARTID;
-  const BoolExpr glibc_test = flags == kGlibcPthreadFlags;
-
-  const BoolExpr android_test =
-      AnyOf(flags == kAndroidCloneMask, flags == kObsoleteAndroidCloneMask,
-            flags == kGlibcPthreadFlags);
+  const int required = CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND |
+                       CLONE_THREAD | CLONE_SYSVSEM;
+  const int safe = CLONE_SETTLS | CLONE_PARENT_SETTID | CLONE_CHILD_CLEARTID |
+	           CLONE_DETACHED;
+  const BoolExpr thread_clone_ok = (flags&~safe)==required;
 
   // The following two flags are the two important flags in any vfork-emulating
   // clone call. EPERM any clone call that contains both of them.
@@ -163,7 +153,7 @@ ResultExpr RestrictCloneToThreadsAndEPERMFork() {
       AnyOf((flags & (CLONE_VM | CLONE_THREAD)) == 0,
             (flags & kImportantCloneVforkFlags) == kImportantCloneVforkFlags);
 
-  return If(IsAndroid() ? android_test : glibc_test, Allow())
+  return If(thread_clone_ok, Allow())
       .ElseIf(is_fork_or_clone_vfork, Error(EPERM))
       .Else(CrashSIGSYSClone());
 }
diff --git a/qtwebengine/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_sets.cc b/qtwebengine/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_sets.cc
index d9d18822f6..056755719f 100644
--- a/qtwebengine/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_sets.cc
+++ b/qtwebengine/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_sets.cc
@@ -392,6 +392,7 @@ bool SyscallSets::IsAllowedProcessStartOrDeath(int sysno) {
 #if defined(__i386__)
     case __NR_waitpid:
 #endif
+    case __NR_set_tid_address:
       return true;
     case __NR_clone:  // Should be parameter-restricted.
     case __NR_setns:  // Privileged.
@@ -404,7 +405,6 @@ bool SyscallSets::IsAllowedProcessStartOrDeath(int sysno) {
 #if defined(__i386__) || defined(__x86_64__) || defined(__mips__)
     case __NR_set_thread_area:
 #endif
-    case __NR_set_tid_address:
     case __NR_unshare:
 #if !defined(__mips__) && !defined(__aarch64__)
     case __NR_vfork:
@@ -514,6 +514,8 @@ bool SyscallSets::IsAllowedAddressSpaceAccess(int sysno) {
     case __NR_mlock:
     case __NR_munlock:
     case __NR_munmap:
+    case __NR_mremap:
+    case __NR_membarrier:
       return true;
     case __NR_madvise:
     case __NR_mincore:
@@ -531,7 +533,6 @@ bool SyscallSets::IsAllowedAddressSpaceAccess(int sysno) {
     case __NR_modify_ldt:
 #endif
     case __NR_mprotect:
-    case __NR_mremap:
     case __NR_msync:
     case __NR_munlockall:
     case __NR_readahead:
diff --git a/qtwebengine/src/3rdparty/chromium/sandbox/linux/seccomp-bpf/trap.cc b/qtwebengine/src/3rdparty/chromium/sandbox/linux/seccomp-bpf/trap.cc
index 003708d2c8..e9c51940c0 100644
--- a/qtwebengine/src/3rdparty/chromium/sandbox/linux/seccomp-bpf/trap.cc
+++ b/qtwebengine/src/3rdparty/chromium/sandbox/linux/seccomp-bpf/trap.cc
@@ -25,6 +25,11 @@
 #include "sandbox/linux/system_headers/linux_seccomp.h"
 #include "sandbox/linux/system_headers/linux_signal.h"
 
+// musl libc defines siginfo_t __si_fields instead of _sifields
+#if !defined(__GLIBC__)
+#define _sifields __si_fields
+#endif
+
 namespace {
 
 struct arch_sigsys {
diff --git a/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/arm64_linux_syscalls.h b/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/arm64_linux_syscalls.h
index 59d0eab8ec..7ae7002133 100644
--- a/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/arm64_linux_syscalls.h
+++ b/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/arm64_linux_syscalls.h
@@ -1063,4 +1063,8 @@
 #define __NR_memfd_create 279
 #endif
 
+#if !defined(__NR_membarrier)
+#define __NR_membarrier 283
+#endif
+
 #endif  // SANDBOX_LINUX_SYSTEM_HEADERS_ARM64_LINUX_SYSCALLS_H_
diff --git a/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/arm_linux_syscalls.h b/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/arm_linux_syscalls.h
index 1addd53843..9b88583970 100644
--- a/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/arm_linux_syscalls.h
+++ b/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/arm_linux_syscalls.h
@@ -1385,6 +1385,11 @@
 #define __NR_memfd_create (__NR_SYSCALL_BASE+385)
 #endif
 
+#if !defined(__NR_membarrier)
+#define __NR_membarrier (__NR_SYSCALL_BASE+389)
+#endif
+
+
 // ARM private syscalls.
 #if !defined(__ARM_NR_BASE)
 #define __ARM_NR_BASE (__NR_SYSCALL_BASE + 0xF0000)
diff --git a/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/mips64_linux_syscalls.h b/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/mips64_linux_syscalls.h
index ec75815a84..612fcfaa94 100644
--- a/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/mips64_linux_syscalls.h
+++ b/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/mips64_linux_syscalls.h
@@ -1271,4 +1271,8 @@
 #define __NR_memfd_create (__NR_Linux + 314)
 #endif
 
+#if !defined(__NR_membarrier)
+#define __NR_membarrier (__NR_Linux + 318)
+#endif
+
 #endif  // SANDBOX_LINUX_SYSTEM_HEADERS_MIPS64_LINUX_SYSCALLS_H_
diff --git a/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/mips_linux_syscalls.h b/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/mips_linux_syscalls.h
index ddbf97f3d8..1742acd4c3 100644
--- a/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/mips_linux_syscalls.h
+++ b/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/mips_linux_syscalls.h
@@ -1433,4 +1433,8 @@
 #define __NR_memfd_create (__NR_Linux + 354)
 #endif
 
+#if !defined(__NR_membarrier)
+#define __NR_membarrier (__NR_Linux + 358)
+#endif
+
 #endif  // SANDBOX_LINUX_SYSTEM_HEADERS_MIPS_LINUX_SYSCALLS_H_
diff --git a/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/x86_32_linux_syscalls.h b/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/x86_32_linux_syscalls.h
index 7613c9bbcd..d0ab832bc3 100644
--- a/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/x86_32_linux_syscalls.h
+++ b/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/x86_32_linux_syscalls.h
@@ -1710,5 +1710,10 @@
 #define __NR_clone3 435
 #endif
 
+#if !defined(__NR_membarrier)
+#define __NR_membarrier 375
+#endif
+
+
 #endif  // SANDBOX_LINUX_SYSTEM_HEADERS_X86_32_LINUX_SYSCALLS_H_
 
diff --git a/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/x86_64_linux_syscalls.h b/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/x86_64_linux_syscalls.h
index 349504aee4..6a6d4756f9 100644
--- a/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/x86_64_linux_syscalls.h
+++ b/qtwebengine/src/3rdparty/chromium/sandbox/linux/system_headers/x86_64_linux_syscalls.h
@@ -1290,5 +1290,10 @@
 #define __NR_memfd_create 319
 #endif
 
+#if !defined(__NR_membarrier)
+#define __NR_membarrier 324
+#endif
+
+
 #endif  // SANDBOX_LINUX_SYSTEM_HEADERS_X86_64_LINUX_SYSCALLS_H_
 
diff --git a/qtwebengine/src/3rdparty/chromium/services/service_manager/sandbox/linux/bpf_renderer_policy_linux.cc b/qtwebengine/src/3rdparty/chromium/services/service_manager/sandbox/linux/bpf_renderer_policy_linux.cc
index 017f13cf7b..5cfdb7a09d 100644
--- a/qtwebengine/src/3rdparty/chromium/services/service_manager/sandbox/linux/bpf_renderer_policy_linux.cc
+++ b/qtwebengine/src/3rdparty/chromium/services/service_manager/sandbox/linux/bpf_renderer_policy_linux.cc
@@ -88,10 +88,16 @@ ResultExpr RendererProcessPolicy::EvaluateSyscall(int sysno) const {
     case __NR_sysinfo:
     case __NR_times:
     case __NR_uname:
+#if !defined(__GLIBC__)
+    case __NR_sched_getparam:
+    case __NR_sched_getscheduler:
+#endif
       return Allow();
     case __NR_sched_getaffinity:
+#if defined(__GLIBC__)
     case __NR_sched_getparam:
     case __NR_sched_getscheduler:
+#endif
     case __NR_sched_setscheduler:
       return sandbox::RestrictSchedTarget(GetPolicyPid(), sysno);
     case __NR_prlimit64:
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/stack_util.cc b/qtwebengine/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/stack_util.cc
index b2421649ff..a31b96e90e 100644
--- a/qtwebengine/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/stack_util.cc
+++ b/qtwebengine/src/3rdparty/chromium/third_party/blink/renderer/platform/wtf/stack_util.cc
@@ -29,7 +29,7 @@ size_t GetUnderestimatedStackSize() {
 // FIXME: On Mac OSX and Linux, this method cannot estimate stack size
 // correctly for the main thread.
 
-#if defined(__GLIBC__) || defined(OS_ANDROID) || defined(OS_FREEBSD) || \
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_FREEBSD) || \
     defined(OS_FUCHSIA)
   // pthread_getattr_np() can fail if the thread is not invoked by
   // pthread_create() (e.g., the main thread of blink_unittests).
@@ -97,7 +97,7 @@ return Threading::ThreadStackSize();
 }
 
 void* GetStackStart() {
-#if defined(__GLIBC__) || defined(OS_ANDROID) || defined(OS_FREEBSD) || \
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_FREEBSD) || \
     defined(OS_FUCHSIA)
   pthread_attr_t attr;
   int error;
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc
index 6ee6cc1e4c..a8f9ccc72a 100644
--- a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc
+++ b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.cc
@@ -49,7 +49,7 @@ uintptr_t UContextReader::GetInstructionPointer(const ucontext_t* uc) {
 }
 
 void UContextReader::FillCPUContext(RawContextCPU *out, const ucontext_t *uc,
-                                    const struct _libc_fpstate* fp) {
+                                    const struct _fpstate* fp) {
   const greg_t* regs = uc->uc_mcontext.gregs;
 
   out->context_flags = MD_CONTEXT_X86_FULL |
@@ -97,7 +97,7 @@ uintptr_t UContextReader::GetInstructionPointer(const ucontext_t* uc) {
 }
 
 void UContextReader::FillCPUContext(RawContextCPU *out, const ucontext_t *uc,
-                                    const struct _libc_fpstate* fpregs) {
+                                    const struct _fpstate* fpregs) {
   const greg_t* regs = uc->uc_mcontext.gregs;
 
   out->context_flags = MD_CONTEXT_AMD64_FULL;
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h
index f830618f24..f3dde1f4df 100644
--- a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h
+++ b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/dump_writer_common/ucontext_reader.h
@@ -50,7 +50,7 @@ struct UContextReader {
   //   info: the collection of register structures.
 #if defined(__i386__) || defined(__x86_64)
   static void FillCPUContext(RawContextCPU *out, const ucontext_t *uc,
-                             const struct _libc_fpstate* fp);
+                             const struct _fpstate* fp);
 #elif defined(__aarch64__)
   static void FillCPUContext(RawContextCPU *out, const ucontext_t *uc,
                              const struct fpsimd_context* fpregs);
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/minidump_writer/minidump_writer.h b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/minidump_writer/minidump_writer.h
index d1dc331215..d1cc5624cd 100644
--- a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/minidump_writer/minidump_writer.h
+++ b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/minidump_writer/minidump_writer.h
@@ -48,7 +48,7 @@ class ExceptionHandler;
 #if defined(__aarch64__)
 typedef struct fpsimd_context fpstate_t;
 #elif !defined(__ARM_EABI__) && !defined(__mips__)
-typedef struct _libc_fpstate fpstate_t;
+typedef struct _fpstate fpstate_t;
 #endif
 
 // These entries store a list of memory regions that the client wants included
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/common/linux/elf_core_dump.h b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/common/linux/elf_core_dump.h
index d03c7a88d3..d43fda0cbb 100644
--- a/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/common/linux/elf_core_dump.h
+++ b/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/common/linux/elf_core_dump.h
@@ -36,6 +36,9 @@
 #include <elf.h>
 #include <link.h>
 #include <stddef.h>
+#ifndef __GLIBC__
+#include <sys/reg.h>
+#endif
 
 #include "common/memory_range.h"
 
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/lss/linux_syscall_support.h b/qtwebengine/src/3rdparty/chromium/third_party/lss/linux_syscall_support.h
index 8e0cc38579..3360899f2a 100644
--- a/qtwebengine/src/3rdparty/chromium/third_party/lss/linux_syscall_support.h
+++ b/qtwebengine/src/3rdparty/chromium/third_party/lss/linux_syscall_support.h
@@ -1794,6 +1794,15 @@ struct kernel_statfs {
 /* End of s390/s390x definitions                                             */
 #endif
 
+#ifndef __GLIBC__
+  /* For Musl libc pread/pread is the same as pread64/pwrite64 */
+#ifndef __NR_pread
+#define __NR_pread              __NR_pread64
+#endif
+#ifndef __NR_pwrite
+#define __NR_pwrite             __NR_pwrite64
+#endif
+#endif /* ifndef __GLIBC__ */
 
 /* After forking, we must make sure to only call system calls.               */
 #if defined(__BOUNDED_POINTERS__)
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/nasm/config/config-linux.h b/qtwebengine/src/3rdparty/chromium/third_party/nasm/config/config-linux.h
index 7eb7c20ffc..3bdc2eb391 100644
--- a/qtwebengine/src/3rdparty/chromium/third_party/nasm/config/config-linux.h
+++ b/qtwebengine/src/3rdparty/chromium/third_party/nasm/config/config-linux.h
@@ -117,7 +117,7 @@
 #define HAVE_ACCESS 1
 
 /* Define to 1 if you have the `canonicalize_file_name' function. */
-#define HAVE_CANONICALIZE_FILE_NAME 1
+// #define HAVE_CANONICALIZE_FILE_NAME 1
 
 /* Define to 1 if you have the `cpu_to_le16' intrinsic function. */
 /* #undef HAVE_CPU_TO_LE16 */
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/ots/include/opentype-sanitiser.h b/qtwebengine/src/3rdparty/chromium/third_party/ots/include/opentype-sanitiser.h
index 08f23befd5..eb4f706fb4 100644
--- a/qtwebengine/src/3rdparty/chromium/third_party/ots/include/opentype-sanitiser.h
+++ b/qtwebengine/src/3rdparty/chromium/third_party/ots/include/opentype-sanitiser.h
@@ -21,6 +21,7 @@ typedef unsigned __int64 uint64_t;
 #define ots_htons(x) _byteswap_ushort (x)
 #else
 #include <arpa/inet.h>
+#include <sys/types.h>
 #include <stdint.h>
 #define ots_ntohl(x) ntohl (x)
 #define ots_ntohs(x) ntohs (x)
diff --git a/qtwebengine/src/3rdparty/chromium/third_party/yasm/source/config/linux/config.h b/qtwebengine/src/3rdparty/chromium/third_party/yasm/source/config/linux/config.h
index 6ca1f6a017..deaee3ca76 100644
--- a/qtwebengine/src/3rdparty/chromium/third_party/yasm/source/config/linux/config.h
+++ b/qtwebengine/src/3rdparty/chromium/third_party/yasm/source/config/linux/config.h
@@ -5,7 +5,7 @@
 #define CPP_PROG "cc -E"
 
 /* */
-#define ENABLE_NLS 1
+/* #undef ENABLE_NLS 1 */
 
 /* Define to 1 if you have the `abort' function. */
 #define HAVE_ABORT 1
diff --git a/qtwebengine/src/3rdparty/chromium/v8/src/base/platform/platform-posix.cc b/qtwebengine/src/3rdparty/chromium/v8/src/base/platform/platform-posix.cc
index 0424d4c135..0bd30b62e6 100644
--- a/qtwebengine/src/3rdparty/chromium/v8/src/base/platform/platform-posix.cc
+++ b/qtwebengine/src/3rdparty/chromium/v8/src/base/platform/platform-posix.cc
@@ -817,7 +817,7 @@ bool Thread::Start() {
 #if V8_OS_MACOSX
     // Default on Mac OS X is 512kB -- bump up to 1MB
     stack_size = 1 * 1024 * 1024;
-#elif V8_OS_AIX
+#elif V8_OS_AIX || !defined(__GLIBC__)
     // Default on AIX is 96kB -- bump up to 2MB
     stack_size = 2 * 1024 * 1024;
 #endif
diff --git a/qtwebengine/src/core/api/qtbug-61521.cpp b/qtwebengine/src/core/api/qtbug-61521.cpp
index 002a1af229..01c81ac8c8 100644
--- a/qtwebengine/src/core/api/qtbug-61521.cpp
+++ b/qtwebengine/src/core/api/qtbug-61521.cpp
@@ -111,7 +111,11 @@ SHIM_HIDDEN void* ShimValloc(size_t size) {
 }
 
 SHIM_HIDDEN void* ShimPvalloc(size_t size) {
+#if defined(__GLIBC__)
     return pvalloc(size);
+#else
+    return valloc((size+4095)&~4095);
+#endif
 }
 
 SHIM_HIDDEN int ShimPosixMemalign(void** r, size_t a, size_t s) {
-- 
2.27.0

