From 354ee67eeab7c0f1e256d203ebd9cb93982c3f7f Mon Sep 17 00:00:00 2001
From: Ishimoto Shinobu <nagakamira@gmail.com>
Date: Sun, 5 Jul 2020 17:17:12 +0300
Subject: [PATCH] rustc 1.44.1

Signed-off-by: Ishimoto Shinobu <nagakamira@gmail.com>
---
 src/libcore/intrinsics.rs      | 4 ++++
 src/libcore/slice/mod.rs       | 6 +++++-
 src/librustc_driver/Cargo.toml | 1 +
 src/librustc_driver/lib.rs     | 1 +
 src/tools/cargo/Cargo.toml     | 2 +-
 5 files changed, 12 insertions(+), 2 deletions(-)

diff --git a/src/libcore/intrinsics.rs b/src/libcore/intrinsics.rs
index 75c731308..703765c03 100644
--- a/src/libcore/intrinsics.rs
+++ b/src/libcore/intrinsics.rs
@@ -998,6 +998,10 @@ extern "rust-intrinsic" {
     #[cfg(not(bootstrap))]
     pub fn min_align_of_val<T: ?Sized>(_: *const T) -> usize;
 
+    /// Obtain the length of a slice pointer
+    #[cfg(rust_compiler="mrustc")]
+    pub fn mrustc_slice_len<T>(pointer: *const [T]) -> usize;
+
     /// Gets a static string slice containing the name of a type.
     ///
     /// The stabilized version of this intrinsic is
diff --git a/src/libcore/slice/mod.rs b/src/libcore/slice/mod.rs
index df976128b..cedd799ad 100644
--- a/src/libcore/slice/mod.rs
+++ b/src/libcore/slice/mod.rs
@@ -72,7 +72,11 @@ impl<T> [T] {
     #[allow(unused_attributes)]
     #[allow_internal_unstable(const_fn_union)]
     pub const fn len(&self) -> usize {
-        unsafe { crate::ptr::Repr { rust: self }.raw.len }
+        #[cfg(not(rust_compiler="mrustc"))]
+        const fn len_inner<T>(s: &[T]) -> usize { unsafe { Repr { rust: s }.raw.len } };
+        #[cfg(rust_compiler="mrustc")]
+        const fn len_inner<T>(s: &[T]) -> usize { unsafe { ::intrinsics::mrustc_slice_len(s) } }
+        len_inner(self)
     }
 
     /// Returns `true` if the slice has a length of 0.
diff --git a/src/librustc_driver/Cargo.toml b/src/librustc_driver/Cargo.toml
index cfd103aed..ecf93948b 100644
--- a/src/librustc_driver/Cargo.toml
+++ b/src/librustc_driver/Cargo.toml
@@ -35,6 +35,7 @@ rustc_interface = { path = "../librustc_interface" }
 rustc_serialize = { path = "../libserialize", package = "serialize" }
 rustc_ast = { path = "../librustc_ast" }
 rustc_span = { path = "../librustc_span" }
+rustc_codegen_llvm = { path = "../librustc_codegen_llvm" }
 
 [target.'cfg(windows)'.dependencies]
 winapi = { version = "0.3", features = ["consoleapi", "debugapi", "processenv"] }
diff --git a/src/librustc_driver/lib.rs b/src/librustc_driver/lib.rs
index fff86ba81..59fe5d7b3 100644
--- a/src/librustc_driver/lib.rs
+++ b/src/librustc_driver/lib.rs
@@ -12,6 +12,7 @@
 extern crate log;
 #[macro_use]
 extern crate lazy_static;
+extern crate rustc_codegen_llvm;
 
 pub extern crate rustc_plugin_impl as plugin;
 
diff --git a/src/tools/cargo/Cargo.toml b/src/tools/cargo/Cargo.toml
index f05232421..7299857ed 100644
--- a/src/tools/cargo/Cargo.toml
+++ b/src/tools/cargo/Cargo.toml
@@ -73,7 +73,7 @@ im-rc = "14.0.0"
 # A noop dependency that changes in the Rust repository, it's a bit of a hack.
 # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`
 # for more information.
-rustc-workspace-hack = "1.0.0"
+rustc-workspace-hack = { path = "../rustc-workspace-hack" }
 
 [target.'cfg(target_os = "macos")'.dependencies]
 core-foundation = { version = "0.7.0", features = ["mac_os_10_7_support"] }
-- 
2.27.0

